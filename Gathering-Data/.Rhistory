cube(3)
square(2)
square(2)
square = make.power(2)
square(2)
cube(3)
ls(environment(cube))
get('n', environment(cube))
ls(environment(cube))
get('n', environment(cube))
x <- 1:4; y <- 6:9
x + y
x>2
x >= 2
x * y
x / y
x <- matrix(1:4, 2, 2); y <- matrix(rep(10, 4), 2, 2)
y
x*y
x
y
x*y
x/y
x %*% y
x
y
install.packages('RMySQL')
library(RMySQL)
ucscDb = dbConnnect(MySQL(), user="genome",)
ucscDb = dbConnect(MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
result = dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19 = dbConnect(mySQL(), user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
hg19 = dbConnect(MySQL(), user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables = dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData = dbReadTable(hg19, "affyU133Plus2")
query = dbSendQuery(hg19, "select * from affyU1333Plus2 where \
misMatches between 1 and 3")
query = dbSendQuery(hg19, "select * from affyU133Plus2 where \
misMatches between 1 and 3")
affyMis = fetch(query); quantile(affyMis$misMatches)
affyMisSmall = fetch(query, n=10)
dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
source('http://bioconductor.org/biocLite.R')
biocLite('rhdf5')
created = h5createFile('example.h5')
created = h5createFile('example.h5')
list.functions
arguments(rhdf5)
library(rhdf5)
created = h5createFile('example.h5')
created
created = h5createGroup('example.h5', "foo")
created = h5createGroup('example.h5', "baa")
created = h5createGroup('example.h5', "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B=array(seq(0.1, 2.0, by=0.1), dim=c(5, 2, 2))
attr(B, "scale") = "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
df = data.frame(1L:5L, seq(0, 1, length.out=5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", "df")
h5ls("example.h5")
h5read("example.h5", "foo/A")
readB = h5read("example.h5", "foo/foobaa/B")
readf = h5read("example.h5", "df")
readA
readA = h5read("example.h5", "foo/A")
readA
h5write(c(12, 13, 14), "example.h5", "foo/A", index=list(1:3, 1))
h5read("example.h5", "foo/A")
h5ls
h5ls
h5ls("example.h5")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readlines(con)
htmlCode = readLines(con)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url = "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html = htmlTreeParse(url, useInternalNode=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
libray(httr)
library(httr)
html2 = GET(url)
content2 = content(html2, as='text')
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, '//title', xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
authenticate("user", "passwd"))
pg2
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user", "passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google, path="/")
pg2 = GET(handle=google, path="search")
pg2
pg1
library(httr)
library(httr)
myapp = oauth_app("twitter",
key="ll5iyr7Ky6gYySIZ3nbOw",
secret=" tfAFNrTWDpYBnQFIi6jNGkwSFB1oOyVALA0Xk4GtxQ")
sig = sign_oauth1.0(myapp,
token="https://api.twitter.com/oauth/authorize"
token_secret= "https://api.twitter.com/oauth/access_token")
sig = sign_oauth1.0(myapp,
token="https://api.twitter.com/oauth/authorize",
token_secret= "https://api.twitter.com/oauth/access_token")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
library(httr)
myapp = oauth_app("twitter",
key="ll5iyr7Ky6gYySIZ3nbOw",
secret=" tfAFNrTWDpYBnQFIi6jNGkwSFB1oOyVALA0Xk4GtxQ")
myapp
sig = sign_oauth1.0(myapp,
token="https://api.twitter.com/oauth/authorize",
token_secret= "https://api.twitter.com/oauth/access_token")
sig
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
sig = sign_oauth1.0(myapp,
token="63185956-8VyWxyXC6yYJ9N6fBgl7CYDU7ADSPdRIFqkwbgmqs",
token_secret= "MJQ6q347Ariat9pCUcjfO3MLoopxKwTqRQRsYjYNT4zIp")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
myapp = oauth_app("twitter",
key="ll5iyr7Ky6gYySIZ3nbOw",
secret="tfAFNrTWDpYBnQFIi6jNGkwSFB1oOyVALA0Xk4GtxQ")
sig = sign_oauth1.0(myapp,
token="63185956-8VyWxyXC6yYJ9N6fBgl7CYDU7ADSPdRIFqkwbgmqs",
token_secret= "MJQ6q347Ariat9pCUcjfO3MLoopxKwTqRQRsYjYNT4zIp")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
json1 = content(homeTL)
json1
json2 = jsonlite::fromJSON(toJSON(json1))
intall.packages('jsonlite')
install.packages('jsonlite')
install.packages("jsonlite")
json1 = content(homeTL)
library(httr)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages('RJSONIO')
library(RJSONIO)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
sig = sign_oauth1.0(myapp,
token="63185956-5cZWGddYbGzKGu1blzxU6j8zbyQje9yBi1byysIZq",
token_secret= "diH3yC5CNpIZRCYMOXn51bLtkm5wKUWWjOEklLp507HGJ")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2[1,1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
install.packages('rdgal')
install.packages('rgeos')
install.packages('tuneR')
update.packages('httr')
library(httr)
oauth_endpoints("github")
myapp = oauth_app("Github",
key="18a477438e2ac55610f7")
myapp = oauth_app("Github",
secret="bdf128f869cbb086acdb9f6ade706a878d040f50")
myapp = oauth_app("Github",
key="18a477438e2ac55610f7",
secret="bdf128f869cbb086acdb9f6ade706a878d040f50")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp = oauth_app("Github",
key="18a477438e2ac55610f7",
secret="bdf128f869cbb086acdb9f6ade706a878d040f50")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
oauth_endpoints("github")
myapp = oauth_app("Github",
key="18a477438e2ac55610f7",
secret="bdf128f869cbb086acdb9f6ade706a878d040f50")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/rate_limit", config(token=github_token))
stop_for_status(req)
content(req)
resources
req
oauth_endpoints("github")
myapp = oauth_app("Github",
key="18a477438e2ac55610f7",
secret="bdf128f869cbb086acdb9f6ade706a878d040f50")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/created", config(token=github_token))
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp = oauth_app("Github",
key="18a477438e2ac55610f7",
secret="bdf128f869cbb086acdb9f6ade706a878d040f50")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token=github_token))
stop_for_status(req)
content(req)
req
req[id]
req[1]
list(req)
req
oauth_endpoints("github")
myapp = oauth_app("Github",
key="18a477438e2ac55610f7",
secret="bdf128f869cbb086acdb9f6ade706a878d040f50")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token=github_token))
content(req)
req
req[2]
req[3]
req[4]
names(req)
req[url]
req["url"]
req["handle"]
list(req)
list(req["url"])
json2 = jsonlite::fromJSON(toJSON(req))
library(RJSONIO)
json2 = jsonlite::fromJSON(toJSON(req))
content(req)
library(RJSONIO)
json2 = jsonlite::fromJSON(toJSON(req))
?RJSONIO
?RJSONIO()
RJSONIO
?library(RJSONIO)
json2 = jsonlite::fromJSON(toJSON(req))
req[1,:]
oauth_endpoints("github")
myapp = oauth_app("Github",
key="18a477438e2ac55610f7",
secret="bdf128f869cbb086acdb9f6ade706a878d040f50")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token=github_token))
#stop_for_status(req)
content(req)
req
req[1,:]
req[1,]
req[1]
req[1,1:2]
req[1,1]
req[1][1]
req[1][4]
req[,][4]
req[::][4]
req[,]
req[0,length(req)]
req[1,length(req)]
req[1:length(req)]
req[1:length(req)][1]
req[1:length(req)][3]
req[1:length(req)][6]
req[1:length(req)][4]
req[1:length(req)]["created"]
req[1:length(req)]["created"]
find?
e
?find
find("created", req)
library(IRanges)
ir <- IRanges(5,10)
ir
start(ir)
end(ir)
width(ir)
?IRanges
ir <- IRanges(start=c(3,5,17), end=c(10,8,20))
ir
ir <- IRanges(5,10)
?"intra-range-methods"
shift(ir, -2)
shift(ir,-2)
narrow(ir, start=2)
narrow(ir, end=5)
narrow(ir, start=2)   #Relative to the start of ir (5), start at
narrow(ir, start=3)   #Relative to the start of ir (5), start at
narrow(ir, start=6)   #Relative to the start of ir (5), start at
narrow(ir, start=2)   #Relative to the start of ir (5), start at
narrow(ir, end=5)    #Relative to the end of ir (5)
narrow(ir, end=6)    #Relative to the start of ir (5), end on the 5th base pair (9)
narrow(ir, end=7)    #Relative to the start of ir (5), end on the 5th base pair (9)
narrow(ir, end=5)    #Relative to the start of ir (5), end on the 5th base pair (9)
flank(ir, width=3, start=TRUE, both=FALSE)
flank(ir, width=3, start=FALSE, both=FALSE)
flank(ir, width=3, start=TRUE, both=TRUE)
plotir <- function(ir,i) { arrows(start(ir)-.5,i,end(ir)+.5,i,code=3,angle=90,lwd=3) }
plot(0,0,xlim=c(0,15),ylim=c(0,8),type="n",xlab="",ylab="",xaxt="n")
axis(1,0:15)
abline(v=0:30 + .5,col=rgb(0,0,0,.5))
# plot the original IRange
plotir(ir,1)
polygon(c(start(ir)-.5,start(ir)-.5,end(ir)+.5,end(ir)+.5),c(-1,9,9,-1),col=rgb(1,0,0,.2),border=NA)
plotir(shift(ir,-2), 2)
plotir(narrow(ir, start=2), 3)
plotir(narrow(ir, end=5), 4)
plotir(flank(ir, width=3, start=TRUE, both=FALSE), 5)
plotir(flank(ir, width=3, start=FALSE, both=FALSE), 6)
plotir(flank(ir, width=3, start=TRUE, both=TRUE), 7)
ir <- IRanges(start=c(3,5,17), end=c(10,8,20))
range(ir)
reduce(ir)
gaps(ir)
disjoin(ir)
range(ir)
ir <- IRanges(start=c(3,5,17), end=c(10,8,20))
range(ir)
reduce(ir)
gaps(ir)
disjoin(ir)
reduce(ir)      #base pairs that are covered by the original ranges
gaps(ir)
library(GenomicRanges)
install.packages("GenomicRanges")
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
install.packages("GenomicRanges")
library(GenomicRanges)
gr <- GRanges("chrZ", IRanges(start=c(5,10),end=c(35,45)),
strand="+", seqlengths=c(chrZ=100L))
getwd()
setwd("/Users/BrianSipple/Development/R/datasciencecoursera/Gathering-Data/")
getwd()
?create
?create()
make
mkdir
dir.create('datasets/')
getwd()
list.files()
fileUrl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./datasets/acs.csv", method="curl")
acs <- read.table(file="./datasets/acs.csv", header=T, sep=",")
library(sqldf)
install.packages(sqldf)
install.packages("sqldf")
library(sqldf)
sqldf("select PWGTP from acs where AGEP < 50")
sqldf("select distinct PWGTP from acs")
sqldf("select distinct AGEP from acs")
fileUrl = "http://biostat.jhsph.edu/~jleek/contact.html"
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlcode
htmlCode
nchar(con[10])
con[0]
nchar(con[20], con[30])
nchar(con[10])
nchar(con[20])
nchar(con[30])
nchar(con[100])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileUrl, destfile="./datasets/noaa.csv")
download.file(fileUrl, destfile="./datasets/noaa.csv", method="curl")
noaa = read.table(file="./datasets/noaa.csv", header=T, sep=",")
noaa = read.table(file="./datasets/noaa.csv", header=F, sep=",")
?read.fwf
noaa = read.fwf(
file="./datasets/noaa.csv",
skip = 3,
header=T,
widths = c(12, 7,4, 9,4, 9,4, 9,4))
noaa = read.fwf(
file="./datasets/noaa.csv",
skip = 4,
widths = c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
head(noaa)
View(noaa)
View(noaa)
noaa[4]
sum(noaa[4])
sum(noaa[4])
noaa
noaa[(noaa$V2 > 3 & noaa$V2 < 26)]
View(noaa)
View(noaa)
noaa[(noaa$"V2" > 3 & noaa$"V2" < 26)]
noaa[(noaa$V2 > 3 & noaa$V2 < 26)]
noaa[(noaa$V2 > 3 & noaa$V2 < 26),]
sort(noaa$V2)
sort(noaa$V2, na.last=T)
order(noaa$V2)
noaa
order(noaa$V2)
sample(4)
rnorm(5)
fileUrl = "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./datasets/restaurants.csv", method="curl")
download.file(fileUrl, destfile="./datasets/restaurants.csv", method="curl")
restData = read.csv("./datasets/restaurants.csv")
View(restData)
View(restData)
head(restData, n=3)
tail(restData, n=6)
summary(restData)
str(restData)
quantile(restData$councilDistrict, na.rm=TRUE)
quantile(restData$councilDistrict, probs=c(0.5, 0.75, 0.9))
table(restData$zipCode, useNA="ifany")
table(restData$councilDistrict, restData$zipCode)
is.na(restData)
colSums(is.na(restData))
all(colSums(is.na(restData)) == 0)
table(restData$zipCode %in% c("21212"))
table(restData$zipCode %in% c("21212", "21213"))
restData[restData$zipCode %in% c("21212", "21213"),]
data(UCBAdmissions)
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data=DF)
xt
ftable(xt)
ftable(restData)
data(warpbreaks)
warpbreaks = as.data.frame(warpbreaks)
summary(warpbreaks)
warpbreaks$replicate = c(1:9, len=54)
warpbreaks$replicate = rep(1:9, len=54)
xt = xtabs(breaks ~. data=warpbreaks)
xt = xtabs(breaks ~., data=warpbreaks)   #breakdown by all variables
xt
ftable(xt)
fakeData = rnorm(1e5)
fakeData
object.size(fakeData)
View(noaa)
library(GenomicRanges)
gr <- GRanges("chrZ", IRanges(start=c(5,10),end=c(35,45)),
strand="+", seqlengths=c(chrZ=100L))
gr
shift(gr, 10)
shift(gr, 80)
trim(shift(gr, 80))
mcols(gr)
mcols(gr)$value <- c(-1,4)
gr
gr2 <- GRanges("chrZ",IRanges(11:13,51:53))
mcols(gr)$value <- NULL
grl <- GRangesList(gr,gr2)
grl
length(grl)
grl[[1]]
mcols(grl)$value <- c(5,7)
grl
mcols(grl)
gr1 <- GRanges("chrZ",IRanges(c(1,11,21,31,41),width=5))
gr2 <- GRanges("chrZ",IRanges(c(19,33),c(38,35)))
gr1
gr2
fo <- findOverlaps(gr1, gr2)
fo
queryHits(fo)
subjectHits(fo)
gr1 %over% gr2
gr1[gr1 %over% gr2]
r <- Rle(c(1,1,1,0,0,-2,-2,-2,rep(-1,20)))
r
str(r)
as.numeric(r)
Views(r, start=c(4,2), end=c(7,6))
r
library(Biobase)
library(GEOquery)
install.packages("GEOquery")
