GetMeanAndSE = function(x) {
m = mean(x)
n = length(x)
SE = sd(x) / sqrt(x)
return(c(m, SE))
}
GetMeanAndSE(d)
GetMeanAndSE = function(x) {
m = mean(x)
n = length(x)
SE = sd(x) / sqrt(n)
return(c(m, SE))
}
GetMeanAndSE(d)
ss = data
Trans = data.frame(num=rep(NA, N), txt=rep("", N)m
Trans <- data.frame(num=rep(NA, N), txt=rep("", N)m
Trans <- data.frame(num=rep(NA, N), txt=rep("", N)m
library(ggplot2)
Trans <- data.frame(num=rep(NA, N), txt=rep("", N)m
Trans <- data.frame(num=rep(NA, N), txt=rep("", N),
Ord <- data.frame(num=rep(NA, N), txt=rep("", N),
library(ggplot2)
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = FALSE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(dplyr)
library(dplyr)
ggplot(data = d, aes(x = carat, y = price)) +
geom_point(color = I('#F79420'), alpha = 1/4) +
stat_smooth(method='lm') +
scale_x_continuous(lim = c(0, quantile(d$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(d$price, 0.99)))
data(diamonds)
library('ggplot2')
library(dplyr)
d = diamonds
ggplot(data = d, aes(x = carat, y = price)) +
geom_point(color = I('#F79420'), alpha = 1/4) +
stat_smooth(method='lm') +
scale_x_continuous(lim = c(0, quantile(d$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(d$price, 0.99)))
cuberoot_trans = function() trans_new('cuberoot',
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = .5, size = 3/4, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = d$clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages("RColorBrewer")
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = FALSE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
mtable(m1, m2, m3, m4, m5)
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
library(swirl)
args(lm)
f = function(a, b = 1, c=2, null)
{}
f = function(a, b) {}
f = function(a, b)
}{}
a^2
f = function(a, b) {
a^2
}
f(2)
print(b)
f = function(a, b) {
print(a)
print(b)
}
f(45)
f(45, "falafel")
myplot <- function(x, y, type = "1" ...) {
plot(x, y, type = type, ...)
}
myplot <- function(x, y, type = "1", ...) {
plot(x, y, type = type, ...)
}
meam
mean
args(paste)
args(cat)
paste("Google google")
paste("google" gllgo)
paste("google", "Microsoft")
paste("google", "Microsoft", sep="o")
add2 = function(a, b) {
x + y   #funciton will always return the last expression
}
add2(9345, 23423)
add2 = function(x, y) {
x + y   #funciton will always return the last expression
}
add2(0295, 32423)
above10 = function(x) {
use <- x > 10
x[use]
}
above10(341323, 343, 2, 3, 3, 6, 3256)
[23, 23526, 24, 4524, 626]
above10([235, 4235435, 453, 5])
above = function(x, n) {
use = x > n
x[use]
}
x = 1:20
above(x, 2)
above10
above10(x)
c(1:30)
length(x)
columnmean = function(y) {
nc = ncol(y)
means = numeric(nc)
for (i in 1:nc){
means[i] = mean(y[, i])
}
means
}
columnmean(airquality)
?rm.na
?rmna
?rm_na
?rm.na()
?rm_na()
columnmean = function(y, removeNA = TRUE) {
nc = ncol(y)
means = numeric(nc)
for (i in 1:nc){
means[i] = mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, removeNA=FALSE)
search()
# This function returns another function as its value
make.power = function(n) {
pow = function(x) {
x^n
}
pow
}
cube = make.power(3)
cube(3)
square(2)
square(2)
square = make.power(2)
square(2)
cube(3)
ls(environment(cube))
get('n', environment(cube))
ls(environment(cube))
get('n', environment(cube))
x <- 1:4; y <- 6:9
x + y
x>2
x >= 2
x * y
x / y
x <- matrix(1:4, 2, 2); y <- matrix(rep(10, 4), 2, 2)
y
x*y
x
y
x*y
x/y
x %*% y
x
y
install.packages('RMySQL')
library(RMySQL)
ucscDb = dbConnnect(MySQL(), user="genome",)
ucscDb = dbConnect(MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
result = dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19 = dbConnect(mySQL(), user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
hg19 = dbConnect(MySQL(), user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables = dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData = dbReadTable(hg19, "affyU133Plus2")
query = dbSendQuery(hg19, "select * from affyU1333Plus2 where \
misMatches between 1 and 3")
query = dbSendQuery(hg19, "select * from affyU133Plus2 where \
misMatches between 1 and 3")
affyMis = fetch(query); quantile(affyMis$misMatches)
affyMisSmall = fetch(query, n=10)
dbClearResult(query)
dim(affyMisSmall)
dbDisconnect(hg19)
source('http://bioconductor.org/biocLite.R')
biocLite('rhdf5')
created = h5createFile('example.h5')
created = h5createFile('example.h5')
list.functions
arguments(rhdf5)
library(rhdf5)
created = h5createFile('example.h5')
created
created = h5createGroup('example.h5', "foo")
created = h5createGroup('example.h5', "baa")
created = h5createGroup('example.h5', "foo/foobaa")
h5ls("example.h5")
A = matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B=array(seq(0.1, 2.0, by=0.1), dim=c(5, 2, 2))
attr(B, "scale") = "liter"
h5write(B, "example.h5", "foo/foobaa/B")
h5ls("example.h5")
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
df = data.frame(1L:5L, seq(0, 1, length.out=5),
c("ab", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", "df")
h5ls("example.h5")
h5read("example.h5", "foo/A")
readB = h5read("example.h5", "foo/foobaa/B")
readf = h5read("example.h5", "df")
readA
readA = h5read("example.h5", "foo/A")
readA
h5write(c(12, 13, 14), "example.h5", "foo/A", index=list(1:3, 1))
h5read("example.h5", "foo/A")
h5ls
h5ls
h5ls("example.h5")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readlines(con)
htmlCode = readLines(con)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url = "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html = htmlTreeParse(url, useInternalNode=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
libray(httr)
library(httr)
html2 = GET(url)
content2 = content(html2, as='text')
parsedHtml = htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, '//title', xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
authenticate("user", "passwd"))
pg2
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user", "passwd"))
pg2
names(pg2)
google = handle("http://google.com")
pg1 = GET(handle=google, path="/")
pg2 = GET(handle=google, path="search")
pg2
pg1
library(httr)
library(httr)
myapp = oauth_app("twitter",
key="ll5iyr7Ky6gYySIZ3nbOw",
secret=" tfAFNrTWDpYBnQFIi6jNGkwSFB1oOyVALA0Xk4GtxQ")
sig = sign_oauth1.0(myapp,
token="https://api.twitter.com/oauth/authorize"
token_secret= "https://api.twitter.com/oauth/access_token")
sig = sign_oauth1.0(myapp,
token="https://api.twitter.com/oauth/authorize",
token_secret= "https://api.twitter.com/oauth/access_token")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
library(httr)
myapp = oauth_app("twitter",
key="ll5iyr7Ky6gYySIZ3nbOw",
secret=" tfAFNrTWDpYBnQFIi6jNGkwSFB1oOyVALA0Xk4GtxQ")
myapp
sig = sign_oauth1.0(myapp,
token="https://api.twitter.com/oauth/authorize",
token_secret= "https://api.twitter.com/oauth/access_token")
sig
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
sig = sign_oauth1.0(myapp,
token="63185956-8VyWxyXC6yYJ9N6fBgl7CYDU7ADSPdRIFqkwbgmqs",
token_secret= "MJQ6q347Ariat9pCUcjfO3MLoopxKwTqRQRsYjYNT4zIp")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
myapp = oauth_app("twitter",
key="ll5iyr7Ky6gYySIZ3nbOw",
secret="tfAFNrTWDpYBnQFIi6jNGkwSFB1oOyVALA0Xk4GtxQ")
sig = sign_oauth1.0(myapp,
token="63185956-8VyWxyXC6yYJ9N6fBgl7CYDU7ADSPdRIFqkwbgmqs",
token_secret= "MJQ6q347Ariat9pCUcjfO3MLoopxKwTqRQRsYjYNT4zIp")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
homeTL
json1 = content(homeTL)
json1
json2 = jsonlite::fromJSON(toJSON(json1))
intall.packages('jsonlite')
install.packages('jsonlite')
install.packages("jsonlite")
json1 = content(homeTL)
library(httr)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
install.packages('RJSONIO')
library(RJSONIO)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
sig = sign_oauth1.0(myapp,
token="63185956-5cZWGddYbGzKGu1blzxU6j8zbyQje9yBi1byysIZq",
token_secret= "diH3yC5CNpIZRCYMOXn51bLtkm5wKUWWjOEklLp507HGJ")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2[1,1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
install.packages('rdgal')
install.packages('rgeos')
install.packages('tuneR')
directory = "/Users/BrianSipple/Development/R/datasciencecoursera/R-Programming/specdata/"
setwd(directory)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
cor_vector = vector()
for (i in 1:length(list.files(directory))){
filename = paste(directory, list.files(directory)[i], sep="")
df = read.table(filename, header=T, sep=",")
complete = 0
for (i in 1:nrow(df)){
complete_status = TRUE
entry = df[i,]   #Read each row into an entry vector, then check that vector for null values
for (i in 1:ncol(entry)){
if (is.na(entry[i])){
complete_status = FALSE
}
}
if (complete_status == TRUE){
complete = complete + 1  # if we made it though, mark a complete entry
}
}
# if complete is greater than the threshold, conduct correlation tests
if(complete >= threshold){
cor_vector = append(cor_vector, cor(df$sulfate, df$nitrate, use="na.or.complete"))
}
}
cor_vector
}
corr(directory)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
ls
files.list()
file.list()
list.files()
getwd()
cd ..
setwd("/Users/BrianSipple/Development/R/datasciencecoursera/R-Programming/Assignment1/)
)
""
exit
"
setwd("/Users/BrianSipple/Development/R/datasciencecoursera/R-Programming/Assignment1")
list.files()
submit()
setwd("/Users/BrianSipple/Development/R/datasciencecoursera/R-Programming/")
submit()
setwd()
getwd()
list.files()
list.files()
submit()
getwd()
setwd("/Users/BrianSipple/Development/R/datasciencecoursera/R-Programming/")
submit()
directory
submit
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
x  = list(a=1:5, b=rnorm(10))
x
lapply(x, mean)
x = list(a=1:4, b = rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x, mean)
lapply(x, runif)
lapply(x, runif)[[1]]
lapply(x, runif)[[2]]
x = 1:4
lapply(x, runif)[[2]]
lapply(x, runif)[12]]
lapply(x, runif)[1]]
lapply(x, runif)[[1]]
lapply(x, runif)[[12]]
lapply(x, runif)[[2]]
lapply(x, runif)[[3]]
lapply(x, runif)[[1]]    #runif generates a specific number of random-uniform variables
lapply(x, runif)[[1]]    #runif generates a specific number of random-uniform variables
x = 1:4
lapply(x, runif, min=0, max=10)
x = list(a=matrix(1:4, 2, 2), b=matrix(1:6, 3,2))
x
lapply(x, function(elt) elt[,1])  #anonymous funcion in the middle of an lapply call
x = list(a=1:4, b=rnorm(10), c=rnorm(20, 1), d=rnorm(100, 5))
x = list(a=1:4, b=rnorm(10), c=rnorm(20, 1), d=rnorm(100, 5))
lapply(x, mean)
sapply(x, mean)
