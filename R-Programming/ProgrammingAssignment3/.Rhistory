# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,23]),][num,]
df = rbind(df, c(as.character(matched[,2]), as.character(matched[,7]))
}
}
df
}
rankAll = function(outcome_name, num) {
states = as.character(unique(outcome[,7]))  # makes a character vector containing all unique state terms
df = data.frame('hospital', 'state')       #empty data frame that will eventually store our states and the sought-after hospital
for (i in 1:length(states)) {
candidates = outcome[which(as.character(outcome[,7]) == states[i]),]
if (outcome_name == "heart attack") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,11]),][num,]
df = rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
} else if (outcome_name == "heart failure") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,17]),][num,]
df = rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
} else if (outcome_name == "pneumonia") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,23]),][num,]
df = rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
}
}
df
}
rankAll('heart attack', 1)
rankAll = function(outcome_name, num) {
states = as.character(unique(outcome[,7]))  # makes a character vector containing all unique state terms
df = data.frame('hospital', 'state')       #empty data frame that will eventually store our states and the sought-after hospital
for (i in 1:length(states)) {
candidates = outcome[which(as.character(outcome[,7]) == states[i]),]
print(candidates)
if (outcome_name == "heart attack") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,11]),][num,]
df = rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
} else if (outcome_name == "heart failure") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,17]),][num,]
df = rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
} else if (outcome_name == "pneumonia") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,23]),][num,]
df = rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
}
}
df
}
rankAll('heart attack', 1)
rankAll = function(outcome_name, num) {
states = as.character(unique(outcome[,7]))  # makes a character vector containing all unique state terms
df = data.frame('hospital', 'state')       #empty data frame that will eventually store our states and the sought-after hospital
for (i in 1:length(states)) {
candidates = outcome[which(as.character(outcome[,7]) == states[i]),]
if (outcome_name == "heart attack") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,11]),][num,]
df = rbind(df, c(as.character(matched[2]), as.character(matched[7])))
} else if (outcome_name == "heart failure") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,17]),][num,]
df = rbind(df, c(as.character(matched[2]), as.character(matched[7])))
} else if (outcome_name == "pneumonia") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,23]),][num,]
df = rbind(df, c(as.character(matched[2]), as.character(matched[7])))
}
}
df
}
rankAll('heart attack', 1)
df
df = data.frame(character("hospital"), character("state"))
df = data.frame(character("hospital"), character("state"))
df
?data.frame
?dataset
?data
library(bioclite)
library(Biobase)
bioclite("dagdata")
biocLite("dagdata")
?Biobase
biocLite(c("dagdata"))
library(dagdata)
library(BioConductor)
library(Bioconductor)
source("http://bioconductor.org/biocLite.R")
biocLite()
library(dagdata)
data(maPooling)
ma = maPooling
names(ma)[:4]
names(ma)[,4]
names(ma)[1:4]
ma[,1:4]
?ma
methods(class="ExpressionSet")
ma = as.data.frame(maPooling)
names(ma)
names(ma)[1:4]
sample = ma[,1:4]
sample = matrix(sample)
?matrix
View(sample)
names(sample)
methods(sample)
sample
sample = matrix(sample, byrow=T)
sample
sample = matrix(sample, byrow=F)
sameple
sample
sample = ma[,1:4]
sample
sample = matrix(sample, byrow=F)
sample
sample = ma[,1:4]
sample = matrix(sample, byrow=T)
sample
sample = ma[,1:4]
sample = matrix(sample, byrow=F)
sample
sample = ma[,1:4]
sample = as.matrix(samplemple)
sample = as.matrix(sample)
sample
?colnames
?colnames
colnames(sample) = c("u, v, y, z")
colnames(sample)[2] = "v"
colnames(sample)[3] = "y"
colnames(sample)[4] = "z"
colnames(sample)[1] = "u"
sample
nrow(sample
)
sample = ma[::,1:4]
sample = ma[:,1:4]
sample = ma[1:nrow(ma),1:4]
View(ma)
View(ma)
names(ma)[1:4]
ma = as.data.frame(maPooling)
View(ma)
names(ma)[1:4]
sample = ma[,1:4]
sample = as.matrix(sample)
View(sample)
View(sample)
sample = ma[,1:4]
sample = as.matrix(sample)
colnames(sample)[1] = "u"
colnames(sample)[2] = "v"
colnames(sample)[3] = "y"
colnames(sample)[4] = "z"
nrow(sample)
sample
u=exprs(maPooling)[,1]
u
nrow(u)
v=exprs(maPooling)[,2]
x=exprs(maPooling)[,3]
y=exprs(maPooling)[,4]
cor(u,v)
cor((u-v), (x-y))
cor((log(u/v)), (log(x/y)))
cor(log(u/v), log(x/y))
cor(log(u/v), log(x/y))
rankAll = function(outcome_name, num) {
states = as.character(unique(outcome[,7]))  # makes a character vector containing all unique state terms
df = data.frame('hospital', 'state')       #empty data frame that will eventually store our states and the sought-after hospital
for (i in 1:length(states)) {
candidates = outcome[which(as.character(outcome[,7]) == states[i]),]
if (outcome_name == "heart attack") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,11]),][num,]
df <- rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
} else if (outcome_name == "heart failure") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,17]),][num,]
df <- rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
} else if (outcome_name == "pneumonia") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,23]),][num,]
df <- rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
}
}
df
}
rankAll
rankAll()
rankAll("heart attack")
split(outcome, outcome[,7])
names(outcome)
outcome["State"]
split(outcome, outcome["state"])
split(outcome, outcome["State"])
a = split(outcome, outcome["State"])
states = as.character(unique(outcome[,7]))  # makes a character vector containing all unique state terms
states
df = data.frame('hospital', 'state')       #empty data frame that will eventually store our states and the sought-after hospital
candidates = outcome[which(as.character(outcome[,7]) == states[i]),]
candidates = outcome[which(as.character(outcome[,7]) == states[3]),]
View(candidates)
View(candidates)
matched = candidates[order(candidates[,11]),][2,]
View(matched)
View(matched)
View(matched)
View(matched)
df <- rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
View(df)
View(df)
df <- rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
df <- rbind(df, c( (as.character(matched[,2])), (as.character(matched[,7])) )
)
df <- rbind(df, (as.character(matched[,2])), (as.character(matched[,7])) )
df <- rbind(df, c(matched[[,2]], matched[[,7]]) )
df <- rbind(df, c(matched[,[,2]], matched[,[,7]]) )
df <- rbind(df, c(matched[,2], matched[,7]) )
df <- rbind(df, c(matched[,2], matched[,7]) )
as.expression
df <- rbind(df, (as.expression(matched[,2])), (as.expression(matched[,7])) )
df <- rbind(df, c(as.factor(matched[,2]), as.factor(matched[,7])))
df <- rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
c(as.character(matched[,2]), as.character(matched[,7]))
df <- rbind(df, (c(as.character(matched[,2]), as.character(matched[,7]))))
list((as.character(matched[,2]), as.character(matched[,7])))
list(as.character(matched[,2]), as.character(matched[,7]))
df <- rbind(df, list(as.character(matched[,2]), as.character(matched[,7])))
test = vector(as.character(matched[,2]), as.character(matched[,7]))
test
test = data.frame(list(as.character(matched[,2]), as.character(matched[,7])))
test
df <- rbind(df, test[1,])
df <- rbind(df, c(test[1,1], test[1,2]))
test
test[1,]
test[[1,]]
test[[1,]]
as.character(test[1,])
as.character(test[,1])
as.character(test[,1:2])
as.character(test[,1])
as.character(test[,1:3])
as.character(test[,1,2])
test
as.character(test[1,1:2])
test[,2]
test[,1:2]
test[:,1:2]
test[1,1:2]
df <- rbind(df, test[1,1:2])
string
sttin
?rbind
?sapply
a = null
a = NA
delete(a)
del(a)
View(candidates)
View(candidates)
tet
test
merge(df, test)
?merge
df = data.frame('hospital', 'state')
df
merge(df, state, all.y=F)
merge(df, test, all.y=F)
merge(df, test, all.y=F)
states
df = data.frame('hospital', 'state')
candidates = outcome[which(as.character(outcome[,7]) == states[6]),]
View(candidates)
matched = candidates[order(candidates[,11]),][4,]
matched
df <- rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
df <- cbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
df
df <- cbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
df
df = data.frame('hospital', 'state')
df <- rbind(df, c(as.character(matched[,2]), as.character(matched[,7])))
to.character
to.character()
character()
character(gege)
character("google")
character(df)
character(5)
df <- rbind(df, data.frame( as.character(matched[,2]), as.character(matched[,7])))
test = data.frame(as.character(matched[,2]), as.character(matched[,7]))
test
df = rbind(df, test)
?rbind
?data.frame
test = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(test) = names(df)
names(test)
rbind(df, test)
rankAll = function(outcome_name, num) {
states = as.character(unique(outcome[,7]))  # makes a character vector containing all unique state terms
df = data.frame('hospital', 'state')       #empty data frame that will eventually store our states and the sought-after hospital
for (i in 1:length(states)) {
candidates = outcome[which(as.character(outcome[,7]) == states[i]),]
if (outcome_name == "heart attack") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,11]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
rbind(df, test)
} else if (outcome_name == "heart failure") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,17]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
rbind(df, test)
} else if (outcome_name == "pneumonia") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,23]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
rbind(df, test)
}
}
df
}
rankAll("heart attack")
rankAll("heart attack", 4)
rankAll = function(outcome_name, num) {
states = as.character(unique(outcome[,7]))  # makes a character vector containing all unique state terms
df = data.frame('hospital', 'state')       #empty data frame that will eventually store our states and the sought-after hospital
for (i in 1:length(states)) {
candidates = outcome[which(as.character(outcome[,7]) == states[i]),]
if (outcome_name == "heart attack") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,11]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
df = rbind(df, test)
} else if (outcome_name == "heart failure") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,17]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
df = rbind(df, test)
} else if (outcome_name == "pneumonia") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,23]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
df = rbind(df, test)
}
}
df
}
rankAll("heart attack", 4)
rankAll("heart attack")
rankAll("heart attack", 1)
rankAll("heart attack", 99)
rankAll("heart attack", 9)
df
df[,2]
df[2,] = c("google", "google")
df[2,] = vector("google", "google")
df
rankAll = function(outcome_name, num) {
states = as.character(unique(outcome[,7]))  # makes a character vector containing all unique state terms
df = data.frame('hospital', 'state')       #empty data frame that will eventually store our states and the sought-after hospital
for (i in 1:length(states)) {
candidates = outcome[which(as.character(outcome[,7]) == states[i]),]
if (outcome_name == "heart attack") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,11]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
df = rbind(df, tmp)
} else if (outcome_name == "heart failure") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,17]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
df = rbind(df, tmp)
} else if (outcome_name == "pneumonia") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,23]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
df = rbind(df, tmp)
}
}
df
}
rankAll("heart attack", 9)
?methods
methods(data.frame)
methods(data.frame())
rankAll = function(outcome_name, num) {
states = as.character(unique(outcome[,7]))  # makes a character vector containing all unique state terms
df = data.frame('hospital', 'state')       #empty data frame that will eventually store our states and the sought-after hospital
for (i in 1:length(states)) {
candidates = outcome[which(as.character(outcome[,7]) == states[i]),]
if (outcome_name == "heart attack") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,11]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
if (!is.na(tmp)){
df = rbind(df, tmp)
}
} else if (outcome_name == "heart failure") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,17]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
if (!is.na(tmp)){
df = rbind(df, tmp)
}
} else if (outcome_name == "pneumonia") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,23]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
if (!is.na(tmp)){
df = rbind(df, tmp)
}
}
}
df
}
rankAll("heart attack", 9)
warnings()
?has.na
is.na(states)
is.na(states) < 9
sum(is.na(states)) < 9
rankAll = function(outcome_name, num) {
states = as.character(unique(outcome[,7]))  # makes a character vector containing all unique state terms
df = data.frame('hospital', 'state')       #empty data frame that will eventually store our states and the sought-after hospital
for (i in 1:length(states)) {
candidates = outcome[which(as.character(outcome[,7]) == states[i]),]
if (outcome_name == "heart attack") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,11]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
if sum(is.na(tmp) < 1){
df = rbind(df, tmp)
}
} else if (outcome_name == "heart failure") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,17]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
if sum(is.na(tmp) < 1){
df = rbind(df, tmp)
}
} else if (outcome_name == "pneumonia") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,23]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
if sum(is.na(tmp) < 1){
df = rbind(df, tmp)
}
}
}
df
}
rankAll = function(outcome_name, num) {
states = as.character(unique(outcome[,7]))  # makes a character vector containing all unique state terms
df = data.frame('hospital', 'state')       #empty data frame that will eventually store our states and the sought-after hospital
for (i in 1:length(states)) {
candidates = outcome[which(as.character(outcome[,7]) == states[i]),]
if (outcome_name == "heart attack") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,11]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
# NA-check the frame before we bind it
if ( sum(is.na(tmp)) < 1){
df = rbind(df, tmp)
}
} else if (outcome_name == "heart failure") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,17]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
# NA-check the frame before we bind it
if ( sum(is.na(tmp)) < 1){
df = rbind(df, tmp)
}
} else if (outcome_name == "pneumonia") {
# order() will create a vector of sorted candidates[,i] values -- with ties broken alpahbetically!
matched = candidates[order(candidates[,23]),][num,]
tmp = data.frame(as.character(matched[,2]), as.character(matched[,7]))
names(tmp) = names(df)
# NA-check the frame before we bind it
if ( sum(is.na(tmp)) < 1){
df = rbind(df, tmp)
}
}
}
df
}
rankAll("heart attack", 9)
